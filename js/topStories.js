// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  define(['underscore', 'jquery'], function() {
    var topStories;
    String.prototype.stripNonAlphaNum = function() {
      return this.toLowerCase().replace(/[^a-zA-Z0-9 ]+/g, '').replace(/\s+/g, ' ').trim();
    };
    return topStories = (function() {

      function topStories(nbOfTopics, pointsForAppearance, pointsForRanking, cb_done) {
        var GOOGLE_FEED, TWITTER_FEED, XML_TO_JSON, YAHOO_FEED, jsonFeeds, key, onSuccess, value;
        this.nbOfTopics = nbOfTopics;
        this.pointsForAppearance = pointsForAppearance;
        this.pointsForRanking = pointsForRanking;
        this.cb_done = cb_done;
        this.findTopStories = __bind(this.findTopStories, this);

        TWITTER_FEED = 'https://api.twitter.com/1/trends/1.json';
        GOOGLE_FEED = 'http://news.google.com/news?output=rss';
        YAHOO_FEED = 'http://rss.news.yahoo.com/rss/topstories';
        XML_TO_JSON = 'http://ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=8&q=';
        jsonFeeds = {
          'google': {
            url: XML_TO_JSON + this.encodeURL(GOOGLE_FEED),
            getTitle: this.getTitleGoogle
          },
          'yahoo': {
            url: XML_TO_JSON + this.encodeURL(YAHOO_FEED),
            getTitle: this.getTitleYahoo
          },
          'twitter': {
            url: TWITTER_FEED,
            getTitle: this.getTitleTwitter
          }
        };
        onSuccess = this.cbClosure(_.size(jsonFeeds), this.findTopStories);
        for (key in jsonFeeds) {
          if (!__hasProp.call(jsonFeeds, key)) continue;
          value = jsonFeeds[key];
          this.apiCall(value, onSuccess);
        }
      }

      topStories.prototype.scoringKeywords = function(titles) {
        var keyword, keywords, pointsForRanking, scoredKeywords, title, _i, _j, _len, _len1;
        scoredKeywords = {};
        pointsForRanking = this.pointsForRanking;
        for (_i = 0, _len = titles.length; _i < _len; _i++) {
          title = titles[_i];
          keywords = title.split(' ');
          for (_j = 0, _len1 = keywords.length; _j < _len1; _j++) {
            keyword = keywords[_j];
            if (keyword.length <= 3) {
              continue;
            }
            if (scoredKeywords[keyword]) {
              scoredKeywords[keyword] += pointsForRanking;
            } else {
              scoredKeywords[keyword] = this.pointsForAppearance + pointsForRanking;
            }
          }
          pointsForRanking--;
        }
        return scoredKeywords;
      };

      topStories.prototype.mergeDictionnaries = function(arrayOfDictionnaries) {
        var dict, keyword, mergedDict, _i, _len, _ref;
        mergedDict = arrayOfDictionnaries[0];
        _ref = arrayOfDictionnaries.slice(1);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dict = _ref[_i];
          for (keyword in dict) {
            if (!__hasProp.call(dict, keyword)) continue;
            if (mergedDict[keyword]) {
              mergedDict[keyword] += dict[keyword];
            } else {
              mergedDict[keyword] = dict[keyword];
            }
          }
        }
        return mergedDict;
      };

      topStories.prototype.findTopStories = function(scoredKeywordsArray) {
        var i, mergedScoredKeywords, res, story, _i, _j, _len, _ref, _ref1;
        mergedScoredKeywords = this.mergeDictionnaries(scoredKeywordsArray);
        res = [];
        _(mergedScoredKeywords).each((function(v, k) {
          if (this[v]) {
            return this[v].push(k);
          } else {
            return this[v] = [k];
          }
        }), res);
        topStories = [];
        for (i = _i = _ref = res.length - 1; _i >= 0; i = _i += -1) {
          if (!res[i]) {
            continue;
          }
          _ref1 = res[i];
          for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
            story = _ref1[_j];
            topStories.push({
              'name': story,
              'points': i
            });
            if (topStories.length >= this.nbOfTopics) {
              break;
            }
          }
          if (topStories.length >= this.nbOfTopics) {
            break;
          }
        }
        return this.cb_done(topStories);
      };

      topStories.prototype.getTitleYahoo = function(data) {
        var el, _i, _len, _ref, _results;
        _ref = data.responseData.feed.entries;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          _results.push(el.title.stripNonAlphaNum());
        }
        return _results;
      };

      topStories.prototype.getTitleGoogle = function(data) {
        var el, _i, _len, _ref, _results;
        _ref = data.responseData.feed.entries;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          _results.push(el.title.substr(0, el.title.lastIndexOf(' - ')).stripNonAlphaNum());
        }
        return _results;
      };

      topStories.prototype.getTitleTwitter = function(data) {
        var el, _i, _len, _ref, _results;
        _ref = data[0].trends;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          if (el.name[0] !== '#') {
            _results.push(el.name.stripNonAlphaNum());
          }
        }
        return _results;
      };

      topStories.prototype.encodeURL = function(url) {
        var encodedURL, l, _i, _len;
        encodedURL = [''];
        for (_i = 0, _len = url.length; _i < _len; _i++) {
          l = url[_i];
          encodedURL.push(l.charCodeAt().toString(16));
        }
        return encodedURL.join('%');
      };

      topStories.prototype.cbClosure = function(nb, cb) {
        var scoredKeywordsArray,
          _this = this;
        scoredKeywordsArray = [];
        return function(titles) {
          scoredKeywordsArray.push(_this.scoringKeywords(titles));
          if (!--nb) {
            return cb(scoredKeywordsArray);
          }
        };
      };

      topStories.prototype.apiCall = function(feed, onSuccess) {
        return $.ajax(feed.url, {
          type: "GET",
          dataType: "jsonp",
          cache: false,
          success: function(data) {
            return onSuccess(feed.getTitle(data));
          }
        });
      };

      return topStories;

    })();
  });

}).call(this);
