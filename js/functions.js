// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty;

  $(function() {
    var GOOGLE_FEED, TWITTER_FEED, XML_TO_JSON, YAHOO_FEED, apiCall, cbClosure, displayTodaysHotTopics, getTitleGoogle, getTitleTwitter, getTitleYahoo, jsonFeeds, key, mergeDictionnaries, onSuccess, scoringKeywords, value, _results;
    String.prototype.stripNonAlphaNum = function() {
      return this.toLowerCase().replace(/[^a-zA-Z0-9 ]+/g, '').replace(/\s+/g, ' ').trim();
    };
    scoringKeywords = function(titles) {
      var keyword, keywords, pointsForAppearance, pointsForRanking, scoredKeywords, title, _i, _j, _len, _len1;
      scoredKeywords = {};
      pointsForAppearance = 15;
      pointsForRanking = 10;
      for (_i = 0, _len = titles.length; _i < _len; _i++) {
        title = titles[_i];
        keywords = title.split(' ');
        for (_j = 0, _len1 = keywords.length; _j < _len1; _j++) {
          keyword = keywords[_j];
          if (keyword.length <= 3) {
            continue;
          }
          if (scoredKeywords[keyword]) {
            scoredKeywords[keyword] += pointsForRanking;
          } else {
            scoredKeywords[keyword] = pointsForAppearance + pointsForRanking;
          }
        }
        pointsForRanking--;
      }
      return scoredKeywords;
    };
    mergeDictionnaries = function(arrayOfDictionnaries) {
      var dict, keyword, mergedDict, _i, _len, _ref;
      mergedDict = arrayOfDictionnaries[0];
      _ref = arrayOfDictionnaries.slice(1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dict = _ref[_i];
        for (keyword in dict) {
          if (!__hasProp.call(dict, keyword)) continue;
          if (mergedDict[keyword]) {
            mergedDict[keyword] += dict[keyword];
          } else {
            mergedDict[keyword] = dict[keyword];
          }
        }
      }
      return mergedDict;
    };
    displayTodaysHotTopics = function(scoredKeywordsArray) {
      var mergedScoredKeywords, res;
      mergedScoredKeywords = mergeDictionnaries(scoredKeywordsArray);
      res = {};
      _(mergedScoredKeywords).each((function(v, k) {
        if (this[v]) {
          return this[v].push(k);
        } else {
          return this[v] = [k];
        }
      }), res);
      return console.log(res);
    };
    getTitleYahoo = function(data) {
      var el, _i, _len, _ref, _results;
      _ref = data.responseData.feed.entries;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        _results.push(el.title.stripNonAlphaNum());
      }
      return _results;
    };
    getTitleGoogle = function(data) {
      var el, _i, _len, _ref, _results;
      _ref = data.responseData.feed.entries;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        _results.push(el.title.substr(0, el.title.lastIndexOf(' - ')).stripNonAlphaNum());
      }
      return _results;
    };
    getTitleTwitter = function(data) {
      var el, _i, _len, _ref, _results;
      _ref = data[0].trends;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        if (el.name[0] !== '#') {
          _results.push(el.name.stripNonAlphaNum());
        }
      }
      return _results;
    };
    cbClosure = function(nb, cb) {
      var scoredKeywordsArray;
      scoredKeywordsArray = [];
      return function(titles) {
        scoredKeywordsArray.push(scoringKeywords(titles));
        if (!--nb) {
          return cb(scoredKeywordsArray);
        }
      };
    };
    apiCall = function(feed, onSuccess) {
      return $.ajax(feed.url, {
        type: "GET",
        dataType: "jsonp",
        cache: false,
        success: function(data) {
          return onSuccess(feed.getTitle(data));
        }
      });
    };
    TWITTER_FEED = 'https://api.twitter.com/1/trends/1.json';
    GOOGLE_FEED = 'http%3A%2F%2Fnews.google.com%2Fnews%3Foutput%3Drss';
    YAHOO_FEED = 'http%3A%2F%2Frss.news.yahoo.com%2Frss%2Ftopstories';
    XML_TO_JSON = 'http://ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=8&q=';
    jsonFeeds = {
      'google': {
        url: XML_TO_JSON + GOOGLE_FEED,
        getTitle: getTitleGoogle
      },
      'yahoo': {
        url: XML_TO_JSON + YAHOO_FEED,
        getTitle: getTitleYahoo
      },
      'twitter': {
        url: TWITTER_FEED,
        getTitle: getTitleTwitter
      }
    };
    onSuccess = cbClosure(_.size(jsonFeeds), displayTodaysHotTopics);
    _results = [];
    for (key in jsonFeeds) {
      if (!__hasProp.call(jsonFeeds, key)) continue;
      value = jsonFeeds[key];
      _results.push(apiCall(value, onSuccess));
    }
    return _results;
  });

}).call(this);
